name: Deploy

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/spring-backend:latest

jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu' # https://github.com/actions/setup-java

      ## gradle caching
      # - name: Gradle Caching
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.gradle/caches
      #       ~/.gradle/wrapper
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-
        
      - name: Create application.yaml for CD Deploy
        run: |
          echo "${{ secrets.APPLICATION_YAML }}" > src/main/resources/application.yaml
          cat src/main/resources/application.yaml
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      ## gradle build
      - name: Build with Gradle
        run: |
          ls
          ./gradlew clean build -x test

      ## docker build & push to production
      - name: Docker build & push to prod
        run: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_TOKEN }}
            docker buildx create --name arm64builder --use
            docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t ghcr.io/${{ github.actor }}/spring-backend:latest --push .
            docker logout
          
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-spring-backend-test ]
    steps:
    # - name: Get Github Actions IP
    #   id: ip
    #   uses: haythem/public-ip@v1.2

    # - name: Configure AWS IAM Credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
    #     aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    #     aws-region: ap-northeast-2
        
    # - name: Add Github Actions IP to Security Group
    #   run: |
    #     aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        
    # - name: Login to GHCR
    #   uses: docker/login-action@v1
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GHCR_TOKEN }}

    - name: Deploy to Production
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.HOST_IP }}
        username: ec2-user
        key: ${{ secrets.PRIVATE_KEY }}
        script_stop: true
        script: |
            cd /home/ec2-user/spring/test-backend
            docker-compose down

            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ${{ env.DOCKER_IMAGE }}

            docker image prune -f
            docker logout

            docker-compose up -d
            
    # - name: Remove Github Actions IP From Security Group
    #   run: |
    #     aws ec2 revoke-security-group-ingress --group-id ${{secrets.AWS_SG_ID}} --protocol tcp --port 22
